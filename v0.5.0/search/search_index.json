{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Structured cli output \u2014 beautifully, simply, and dependency-free.</p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>Outlify is designed with a focus on streamlined log output, making it perfect for cli tools. It emphasizes lightweight operation and minimal dependencies, ensuring smooth integration into any project. The second key aspect of Outlify is its beautiful and user-friendly log formatting, designed to enhance readability and provide a pleasant experience for developers and their users.</p>"},{"location":"#install","title":"Install","text":"<p>Outlify is available as a Python package and can be easily installed via <code>pip</code> from PyPI.</p> <p>To install, simply run the following command: <pre><code>pip install outlify\n</code></pre> This will automatically install the latest version of Outlify.</p>"},{"location":"#usage","title":"Usage","text":"<p>You can view demos of any available modules by running the following command: <pre><code>python -m outlify.module_name\n</code></pre></p> <p>For example, to view the demo for the Panel module: <pre><code>python -m outlify.panel\n</code></pre></p>"},{"location":"#license","title":"License","text":"<p>Licensed under the MIT License, Copyright (c) 2025 Vladislav Kishkin</p>"},{"location":"components/","title":"Components","text":"<p>This contains all the Outlify components you can use.  To view a demo to quickly see the functionality of a particular component, use: <pre><code>python -m outlify.&lt;component&gt;\n</code></pre></p> <p>For example, to view the demo for the Panel module: <pre><code>python -m outlify.panel\n</code></pre></p>"},{"location":"components/#quicklinks","title":"Quicklinks","text":""},{"location":"components/#panels","title":"Panels","text":"<p>Panel</p> <p>Used for displaying plain text content inside a customizable Panel.</p> <p>ParamsPanel</p> <p>Specialized Panel for displaying key-value pairs, often used for configuration settings or parameterized data.</p> <p>Common customization</p> <p>General Panel customization that does not depend on a specific Panel.</p>"},{"location":"components/#lists","title":"Lists","text":"<p>TitledList</p> <p>Used to output a simple list of headings in a structured form.</p>"},{"location":"components/#style","title":"Style","text":"<p>Colors</p> <p>A class for managing text colors.</p> <p>Styles</p> <p>A class for managing text styles.</p> <p>AnsiCodes</p> <p>A classes for managing colors.  <code>Colors</code> for text colors aka foreground.  <code>Back</code> for background.</p>"},{"location":"components/list/","title":"List","text":"<p>The List module in Outlify helps structure list information, improving readability and visual organization when displaying grouped data in terminal applications. It is especially useful for presenting collections, options, or summaries in a clean and consistent format.</p> <p>To view the demo for the List module use:</p> <pre><code>python -m outlify.list\n</code></pre> <pre><code>Outlify helps you create list output in a beautiful format\n\nThe first one is the simplest: a titled list\nPackages (4): ruff@1.0.0  pytest@1.2.3  mkdocs@3.2.1  mike@0.0.1\n\nContinued...\n</code></pre>"},{"location":"components/list/#titledlist","title":"TitledList","text":"<p>If you need a simple titled list in structured output, you can use <code>TitledList</code>.</p> <pre><code>from outlify.list import TitledList\n\npackages = ['first', 'second', 'third']\nprint(TitledList(packages))\n</code></pre> <pre><code>Content (3): first  second  third\n</code></pre>"},{"location":"components/list/#title","title":"<code>title</code>","text":"<p>Customize the title prefix of the list. The count will be automatically appended.</p> <pre><code>from outlify.list import TitledList\n\npackages = ['first-package-1.0.0', 'second-package-1.2.3']\nprint(TitledList(packages, title='Packages'))\n</code></pre> <pre><code>Packages (2): first-package-1.0.0  second-package-1.2.3\n</code></pre>"},{"location":"components/list/#separator","title":"<code>separator</code>","text":"<p>Change how items are separated in the output. Default is two spaces.</p> <pre><code>from outlify.list import TitledList\n\nfruits = ['apple', 'banana', 'orange']\nprint(TitledList(fruits, separator=', '))\n</code></pre> <pre><code>Content (3): apple, banana, orange\n</code></pre>"},{"location":"components/list/#title_style","title":"<code>title_style</code>","text":"<p>You can also style title with the list, for example,  paint them red, make bold or  underlining the text.</p> <p>You can pass a style like this:</p> <pre><code>from outlify.list import TitledList\nfrom outlify.style import Colors, Styles\n\nelements = ['elem1', 'elem2']\nprint(TitledList(elements, title_style=[Colors.red, Styles.bold]))\n</code></pre> <p>For details on styling, see Styles.</p>"},{"location":"components/panel/","title":"Panels","text":"<p>The Panel module in Outlify provides a way to display content within structured,  visually distinct panels. This is especially useful for emphasizing important information in your cli outputs. Panels can have titles, borders, and various formatting styles, making them perfect for logging warnings, errors, or key messages.</p> <p>To view the demo for the Panel module use:</p> <pre><code>python -m outlify.panel\n</code></pre> <pre><code>\u256d\u2500 Welcome to Outlify \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Outlify helps you render beautiful command-line    \u2502\n\u2502 panels.                                            \u2502\n\u2502 You can customize borders, alignment, etc.         \u2502\n\u2502                                                    \u2502\n\u2502 This is just a simple text panel.                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Text Panel Demo \u2500\u256f\n\nContinued...\n</code></pre>"},{"location":"components/panel/#panel","title":"Panel","text":"<p>For normal text output without any customization you can just pass the text inside <code>Panel</code>: <pre><code>from outlify.panel import Panel\n\nprint(Panel('A very important text'))\n</code></pre></p> <p>For details on customizing the Panel, see Common customization.</p>"},{"location":"components/panel/#paramspanel","title":"ParamsPanel","text":"<p>If you want to display parameters, environment variables or anything else, <code>ParamsPanel</code> is perfect for you.</p> <p>Unlike a regular <code>Panel</code>, in a <code>ParamPanel</code> you do not pass plain text, but a key-value structure:</p> <pre><code>from outlify.panel import ParamsPanel\n\nparameters = {'parameter1': 'value1', 'parameter2': 'value2'}\nprint(ParamsPanel(parameters, title='Startup Parameters'))\n</code></pre>"},{"location":"components/panel/#hidden","title":"<code>hidden</code>","text":"<p>To hide sensitive data you can use <code>hidden</code> argument:</p> <pre><code>from outlify.panel import ParamsPanel\n\nparameters = {\n    'parameter1': 'value1', \n    'parameter2': 'value2', \n    'token': 'fake-token'\n}\nprint(ParamsPanel(parameters, hidden=('token', )))\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 parameter1 = value1                  \u2502\n\u2502 parameter2 = value2                  \u2502\n\u2502 token      = *****                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Note</p> <p><code>hidden</code> works in such a way that if a value is passed into it  and it needs to be masked, it will print <code>*****</code> instead of the value,  otherwise it will empty the value.</p>"},{"location":"components/panel/#separator","title":"<code>separator</code>","text":"<p>The default is <code>=</code> between the key and the value, but this can be overridden using <code>separator</code> argument to, for example, <code>:</code>:</p> <pre><code>from outlify.panel import ParamsPanel\n\nparameters = {'parameter1': 'value1', 'parameter2': 'value2'}\nprint(ParamsPanel(parameters, separator=': '))\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 parameter1: value1                   \u2502\n\u2502 parameter2: value2                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"components/panel/#params_style","title":"<code>params_style</code>","text":"<p>if you want to style variable names in parameters, you can use <code>params_style</code>. This works the same way as <code>title_style</code> / <code>subtitle_style</code> / <code>border_style</code> </p>"},{"location":"components/panel/#in-addition","title":"In addition","text":"<p>Also a feature of <code>ParamsPanel</code> is that values are aligned to the <code>separator</code> if they are too large, for example:</p> <pre><code>from outlify.panel import ParamsPanel\n\nparameters = {\n    'parameter1': 'This is a fake value to show you how Outlify can wrap text in the Parameters Panel', \n    'parameter2': 'value2'\n}\nprint(ParamsPanel(parameters, separator=': '))\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 parameter1: This is a fake value to  \u2502\n\u2502             show you how Outlify can \u2502\n\u2502              wrap text in the        \u2502\n\u2502             Parameters Panel         \u2502\n\u2502 parameter2: value2                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>For details on customizing the Panel, see Common customization.</p>"},{"location":"components/panel/#common-customization","title":"Common customization","text":"<p>In any Panel you can customize Panel width, titles, its aligns and borders and.</p>"},{"location":"components/panel/#width","title":"<code>width</code>","text":"<p>You can specify <code>width</code> like this:</p> <pre><code>from outlify.panel import Panel\n\ntext = 'My text'\nprint(Panel(text, width=len(text) + 4))\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 My text \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>If you don't specify a size, it will automatically adjust for the terminal size. </p> <p>Note</p> <p>For CI systems it is not possible to calculate the size and the Panel will be size 80</p>"},{"location":"components/panel/#title-subtitle","title":"<code>title</code> / <code>subtitle</code>","text":"<p>You can specify titles using <code>title</code> (for header title) or <code>subtitle</code> (for footer title) like this:</p> <pre><code>from outlify.panel import Panel\n\nprint(Panel('My text', title='Header title', subtitle='Footer title'))\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Header title \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 My text                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Footer title \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"components/panel/#title_align-subtitle_align","title":"<code>title_align</code> / <code>subtitle_align</code>","text":"<p>By default, the title is placed in the <code>center</code> of the Panel,  but you can move it to the <code>left</code> or <code>right</code> by specifying:</p> <pre><code>from outlify.panel import Panel\n\nprint(Panel('My text', title='Header title', title_align='left'))\n</code></pre> <pre><code>\u256d\u2500 Header title \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 My text                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Works the same way for <code>subtitle</code>.</p> <p>You can also use the <code>Align</code> enum from <code>outlify.styles</code> to do this:</p> <pre><code>from outlify.style import Align\nfrom outlify.panel import Panel\n\nprint(Panel('My text', title='Header title', title_align=Align.left))\n</code></pre> <pre><code>\u256d\u2500 Header title \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 My text                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"components/panel/#border","title":"<code>border</code>","text":"<p>You can replace the default borders using <code>border</code> like this:</p> <pre><code>from outlify.panel import Panel\n\nprint(Panel('My text', border='\u2554\u2557\u255a\u255d\u2550\u2551'))\n</code></pre> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 My text                              \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre> <p>or to make it clearer in the code, use <code>BorderStyle</code>:</p> <pre><code>from outlify.style import BorderStyle\nfrom outlify.panel import Panel\n\nborder = BorderStyle(\n    lt='\u2554', rt='\u2557',\n    lb='\u255a', rb='\u255d',\n    headers='\u2550', sides='\u2551'\n)\nprint(Panel('My text', border=border))\n</code></pre> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 My text                              \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre> <p>Here <code>lt</code>, <code>rt</code> are the top left and right corners,  <code>lb</code>, <code>rb</code> are the bottom corners.  <code>headers</code> are the symbols for the \"caps\" at the top and bottom,  and <code>siders</code> are the side symbols.</p> <p>The <code>siders</code> deserve special attention. If you specify it as an empty string,  or in case of using not <code>BorderStyle</code> but a <code>str</code>, specify five characters instead of six,  the text inside Panel will not wrap, it will stretch to the full width of the terminal.</p> <pre><code>from outlify.panel import Panel\n\nlong_text = (\n        \"In a world where CLI tools are often boring and unstructured, \"\n        \"Outlify brings beauty and structure to your terminal output. \"\n        \"It allows developers to create elegant panels with customizable \"\n        \"borders, titles, subtitles, and aligned content \u2014 all directly \"\n        \"in the terminal.\\n\\n\"\n        \"Outlify is lightweight and dependency-free \u2014 it uses only Python\u2019s \"\n        \"standard libraries, so you can easily integrate it into any \"\n        \"project without worrying about bloat or compatibility issues.\\n\\n\"\n        \"Whether you're building debugging tools, reporting pipelines, or \"\n        \"just want to print data in a cleaner way, \"\n        \"Outlify helps you do it with style.\"\n    )\nprint(Panel(long_text, border='\u2554\u2557\u255a\u255d\u2550'))\n</code></pre> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n In a world where CLI tools are often boring and unstructured, Outlify brings beauty and structure to your terminal output. It allows developers to create elegant panels with customizable borders, titles, subtitles, and aligned content \u2014 all directly in the terminal.\n\n Outlify is lightweight and dependency-free \u2014 it uses only Python\u2019s standard libraries, so you can easily integrate it into any project without worrying about bloat or compatibility issues.\n\n Whether you're building debugging tools, reporting pipelines, or just want to print data in a cleaner way, Outlify helps you do it with style.\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre>"},{"location":"components/panel/#title_style-subtitle_style-border_style","title":"<code>title_style</code> / <code>subtitle_style</code> / <code>border_style</code>","text":"<p>You can also style title with the list, for example,  paint them red, make bold or  underlining the text.</p> <p>You can pass a style like this:</p> <pre><code>from outlify.panel import Panel\nfrom outlify.style import Colors, Styles\n\nprint(Panel('Text', title_style=[Colors.red], border_style=[Styles.bold]))\n</code></pre> <p>For details on styling, see Styles.</p>"},{"location":"components/style/","title":"Styles","text":"<p>The Style module allows you to customize text styling and colors, including in Outlify elements.</p> <p>To view the demo for the Style module use:</p> <pre><code>python -m outlify.style\n</code></pre>"},{"location":"components/style/#colors-back","title":"<code>Colors</code> / <code>Back</code>","text":"<p>A classes for managing colors.</p> <ul> <li><code>Colors</code> for text colors aka foreground.</li> <li><code>Back</code> for background.</li> </ul>"},{"location":"components/style/#standard-color-8-16-colors","title":"Standard color: 8-16 Colors","text":"Color field Text color codes Background color codes Comments <code>black</code> <code>30</code> <code>40</code> <code>red</code> <code>31</code> <code>41</code> <code>green</code> <code>32</code> <code>42</code> <code>yellow</code> <code>33</code> <code>43</code> <code>blue</code> <code>34</code> <code>44</code> <code>magenta</code> <code>35</code> <code>45</code> <code>cyan</code> <code>36</code> <code>46</code> <code>white</code> <code>37</code> <code>47</code> <code>gray</code> <code>90</code> <code>100</code> Bright black <code>crimson</code> <code>91</code> <code>101</code> Bright red <code>lime</code> <code>92</code> <code>102</code> Bright green <code>gold</code> <code>93</code> <code>103</code> Bright yellow <code>skyblue</code> <code>94</code> <code>104</code> Bright blue <code>violet</code> <code>95</code> <code>105</code> Bright magenta <code>aqua</code> <code>96</code> <code>106</code> Bright cyan <code>snow</code> <code>97</code> <code>107</code> Bright white <code>reset</code> <code>39</code> <code>39</code> Reset all colors"},{"location":"components/style/#styles_1","title":"<code>Styles</code>","text":"<p>A class for managing text styles.</p>"},{"location":"components/style/#available-fields","title":"Available fields","text":"Style Field / Reset field Text style codes Reset style codes Description <code>bold</code> / <code>reset_bold</code> <code>1</code> <code>22</code> Makes text bold or brighter (depending on terminal support) <code>dim</code> / <code>reset_dim</code> <code>2</code> <code>22</code> Makes text dim or less intense <code>italic</code> / <code>reset_italic</code> <code>3</code> <code>23</code> Italic text (not supported in many terminal emulators) <code>underline</code> / <code>reset_underline</code> <code>4</code> <code>24</code> Underlines the text <code>blink</code> / <code>reset_blink</code> <code>5</code> <code>25</code> Makes the text blink (deprecated and rarely supported) <code>inverse</code> / <code>reset_inverse</code> <code>7</code> <code>27</code> Inverts foreground and background colors <code>hidden</code> / <code>reset_hidden</code> <code>8</code> <code>28</code> Hides the text (useful for passwords, visible when copied) <code>crossed_out</code> / <code>reset_crossed_out</code> <code>9</code> <code>29</code> Strikes through the text <code>reset</code> <code>0</code> Reset all styles include colors/styles"},{"location":"components/style/#ansicodes","title":"<code>AnsiCodes</code>","text":"<p>This is parent class for <code>Colors</code>, <code>Back</code>, <code>Styles</code>.  But it can help you in your customization as well.  Just specify the variable name and its value as a code / sequence of codes, and it will convert your codes to ansi escape sequences on initialization like this:</p> <pre><code>from outlify.style import AnsiCodes\n\nclass CustomAnsiCodes(AnsiCodes):\n    &lt;name&gt; = &lt;code(s)&gt;\n\nCustom = CustomAnsiCodes()\n</code></pre> <p>And use it as a Outlify styles.</p> <p>If you do not have enough standard colors, for example, you want to add a branded color of your instrument, then you can use <code>AnsiCodes</code>.</p> <ul> <li>Colors by IDs: 256 Colors </li> <li>Colors by RGB: RGB Colors </li> </ul>"},{"location":"components/style/#256-colors","title":"256 Colors","text":"<p>The following escape codes tells the terminal to use the given color ID:</p> Codes Description <code>38</code>, <code>5</code>, <code>{ID}</code> Set text color aka foreground <code>48</code>, <code>5</code>, <code>{ID}</code> Set background color <p>You can find more information at ANSI Escape Sequences: 256 Colors</p> <p>How to create your own colors by IDs using <code>AnsiCodes</code>: <pre><code>from outlify.style import AnsiCodes, Colors\n\nclass IDAnsiCodes(AnsiCodes):\n    pink   = [38, 5, 207]\n    orange = [38, 5, 208]\n\nCustom = IDAnsiCodes()\nprint(f'{Custom.pink}Colored text{Colors.reset}')\n</code></pre></p>"},{"location":"components/style/#rgb-colors","title":"RGB Colors","text":"<p>More modern terminals supports Truecolor (24-bit RGB), which allows you to set foreground and background colors using RGB.</p> <p>The following escape codes tells the terminal to use the given RGB color:</p> Codes Description <code>38</code>, <code>2</code>, <code>{r}</code>, <code>{g}</code>, <code>{b}</code> Set text color aka foreground as RGB. <code>48</code>, <code>2</code>, <code>{r}</code>, <code>{g}</code>, <code>{b}</code> Set background color as RGB. <p>You can find more information at ANSI Escape Sequences: RGB Colors</p> <p>How to create your own colors by IDs using <code>AnsiCodes</code>: <pre><code>from outlify.style import AnsiCodes, Colors\n\nclass RGBAnsiCodes(AnsiCodes):\n    pink   = [38, 2, 255, 192, 203]\n    orange = [38, 2, 255, 128, 0]\n\nCustom = RGBAnsiCodes()\nprint(f'{Custom.pink}Colored text{Colors.reset}')\n</code></pre></p>"},{"location":"components/style/#advanced","title":"Advanced","text":""},{"location":"components/style/#ansi-escape-sequences","title":"Ansi escape sequences","text":"<p>Question</p> <p>Why are pre-prepared ansi escape sequences for each style used separately instead of together? (<code>\\033[1m\\033[30m</code> instead of <code>\\033[1;30m</code>)</p> <p>The difference between terminal processing of the first and second variants is very small. If we make a convenient class that will process and create one sequence of ansi characters, it will take more time to process it than separate ones. Convenience is chosen over hundred-thousandths of a second of execution time.</p> <p>To check the processing time of these two options, you can run this code:</p> <pre><code>from time import time\n\ndef timer(text: str):\n    now = time()\n    print(text)\n    return time() - now\n\ntimer('warp up')\nx = timer('\\033[31m\\033[1m\\033[0m')\ny = timer('\\033[31;1m\\033[0m')\n\nprint('Results:')\nprint(f'1. single ansi escape sequence: {x:10f}')\nprint(f'2. multiple ansi escape sequence: {y:10f}')\nprint(f'{x / y:2f} times faster')\n</code></pre> <pre><code>warp up\n\n\nResults:\n1. single ansi escape sequence:   0.000003\n2. multiple ansi escape sequence:   0.000003\n1.166667 times faster\n</code></pre>"}]}