{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Structured cli output \u2014 beautifully, simply, and dependency-free.</p>"},{"location":"#overview","title":"Overview","text":"<p>Outlify is designed with a focus on streamlined log output, making it perfect for cli tools. It emphasizes lightweight operation and minimal dependencies, ensuring smooth integration into any project. The second key aspect of Outlify is its beautiful and user-friendly log formatting, designed to enhance readability and provide a pleasant experience for developers and their users.</p>"},{"location":"#install","title":"Install","text":"<p>Outlify is available as a Python package and can be easily installed via <code>pip</code> from PyPI.</p> <p>To install, simply run the following command: <pre><code>pip install outlify\n</code></pre> This will automatically install the latest version of Outlify.</p>"},{"location":"#usage","title":"Usage","text":"<p>You can view demos of any available modules by running the following command: <pre><code>python -m outlify.module_name\n</code></pre></p> <p>For example, to view the demo for the Panel module: <pre><code>python -m outlify.panel\n</code></pre></p>"},{"location":"#license","title":"License","text":"<p>Licensed under the MIT License, Copyright (c) 2025 Vladislav Kishkin</p>"},{"location":"components/","title":"Components","text":"<p>This contains all the Outlify components you can use.  To view a demo to quickly see the functionality of a particular component, use: <pre><code>python -m outlify.&lt;component&gt;\n</code></pre></p> <p>For example, to view the demo for the Panel module: <pre><code>python -m outlify.panel\n</code></pre></p>"},{"location":"components/#quicklinks","title":"Quicklinks","text":""},{"location":"components/#panels","title":"Panels","text":"<p>Panel</p> <p>Used for displaying plain text content inside a customizable Panel.</p> <p>ParamsPanel</p> <p>Specialized Panel for displaying key-value pairs, often used for configuration settings or parameterized data.</p> <p>Common customization</p> <p>General Panel customization that does not depend on a specific Panel.</p>"},{"location":"components/panel/","title":"Panels","text":"<p>The Panel module in Outlify provides a way to display content within structured,  visually distinct panels. This is especially useful for emphasizing important information in your cli outputs. Panels can have titles, borders, and various formatting styles, making them perfect for logging warnings, errors, or key messages.</p> <p>To view the demo for the Panel module use:</p> <pre><code>python -m outlify.panel\n</code></pre> <pre><code>\u256d\u2500 Welcome to Outlify \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Outlify helps you render beautiful command-line    \u2502\n\u2502 panels.                                            \u2502\n\u2502 You can customize borders, alignment, etc.         \u2502\n\u2502                                                    \u2502\n\u2502 This is just a simple text panel.                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Text Panel Demo \u2500\u256f\n\nContinued...\n</code></pre>"},{"location":"components/panel/#panel","title":"Panel","text":"<p>For normal text output without any customization you can just pass the text inside <code>Panel</code>: <pre><code>from outlify.panel import Panel\n\nprint(Panel('A very important text'))\n</code></pre></p> <p>For details on customizing the Panel, see Common customization.</p>"},{"location":"components/panel/#paramspanel","title":"ParamsPanel","text":"<p>If you want to display parameters, environment variables or anything else, <code>ParamsPanel</code> is perfect for you.</p> <p>Unlike a regular <code>Panel</code>, in a <code>ParamPanel</code> you do not pass plain text, but a key-value structure: <pre><code>from outlify.panel import ParamsPanel\n\nparameters = {'parameter1': 'value1', 'parameter2': 'value2'}\nprint(ParamsPanel(parameters, title='Startup Parameters'))\n</code></pre></p>"},{"location":"components/panel/#hidden","title":"<code>hidden</code>","text":"<p>To hide sensitive data you can use <code>hidden</code> argument:</p> <pre><code>from outlify.panel import ParamsPanel\n\nparameters = {\n    'parameter1': 'value1', \n    'parameter2': 'value2', \n    'token': 'fake-token'\n}\nprint(ParamsPanel(parameters, hidden=('token', )))\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 parameter1 = value1                  \u2502\n\u2502 parameter2 = value2                  \u2502\n\u2502 token      = *****                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Note</p> <p><code>hidden</code> works in such a way that if a value is passed into it  and it needs to be masked, it will print <code>*****</code> instead of the value,  otherwise it will empty the value.</p>"},{"location":"components/panel/#separator","title":"<code>separator</code>","text":"<p>The default is <code>=</code> between the key and the value, but this can be overridden using <code>separator</code> argument to, for example, <code>:</code>:</p> <pre><code>from outlify.panel import ParamsPanel\n\nparameters = {'parameter1': 'value1', 'parameter2': 'value2'}\nprint(ParamsPanel(parameters, separator=': '))\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 parameter1: value1                   \u2502\n\u2502 parameter2: value2                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"components/panel/#in-addition","title":"In addition","text":"<p>Also a feature of <code>ParamsPanel</code> is that values are aligned to the <code>separator</code> if they are too large, for example:</p> <pre><code>from outlify.panel import ParamsPanel\n\nparameters = {\n    'parameter1': 'This is a fake value to show you how Outlify can wrap text in the Parameters Panel', \n    'parameter2': 'value2'\n}\nprint(ParamsPanel(parameters, separator=': '))\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 parameter1: This is a fake value to  \u2502\n\u2502             show you how Outlify can \u2502\n\u2502              wrap text in the        \u2502\n\u2502             Parameters Panel         \u2502\n\u2502 parameter2: value2                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>For details on customizing the Panel, see Common customization.</p>"},{"location":"components/panel/#common-customization","title":"Common customization","text":"<p>In any Panel you can customize Panel width, titles, its aligns and borders and.</p>"},{"location":"components/panel/#width","title":"<code>width</code>","text":"<p>You can specify <code>width</code> like this:</p> <pre><code>from outlify.panel import Panel\n\ntext = 'My text'\nprint(Panel(text, width=len(text) + 4))\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 My text \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>If you don't specify a size, it will automatically adjust for the terminal size. </p> <p>Note</p> <p>For CI systems it is not possible to calculate the size and the Panel will be size 80</p>"},{"location":"components/panel/#titlesubtitle","title":"<code>title</code>/<code>subtitle</code>","text":"<p>You can specify titles using <code>title</code> (for header title) or <code>subtitle</code> (for footer title) like this:</p> <pre><code>from outlify.panel import Panel\n\nprint(Panel('My text', title='Header title', subtitle='Footer title'))\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Header title \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 My text                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Footer title \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"components/panel/#title_alignsubtitle_align","title":"<code>title_align</code>/<code>subtitle_align</code>","text":"<p>By default, the title is placed in the <code>center</code> of the Panel,  but you can move it to the <code>left</code> or <code>right</code> by specifying:</p> <pre><code>from outlify.panel import Panel\n\nprint(Panel('My text', title='Header title', title_align='left'))\n</code></pre> <pre><code>\u256d\u2500 Header title \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 My text                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Works the same way for <code>subtitle</code>.</p> <p>You can also use the <code>Align</code> enum from <code>outlify.styles</code> to do this:</p> <pre><code>from outlify.styles import Align\nfrom outlify.panel import Panel\n\nprint(Panel('My text', title='Header title', title_align=Align.left))\n</code></pre> <pre><code>\u256d\u2500 Header title \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 My text                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"components/panel/#border_style","title":"<code>border_style</code>","text":"<p>You can replace the default borders using <code>border_style</code> like this:</p> <pre><code>from outlify.panel import Panel\n\nprint(Panel('My text', border_style='\u2554\u2557\u255a\u255d\u2550\u2551'))\n</code></pre> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 My text                              \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre> <p>or to make it clearer in the code, use <code>BorderStyle</code>:</p> <pre><code>from outlify.styles import BorderStyle\nfrom outlify.panel import Panel\n\nborders = BorderStyle(\n    lt='\u2554', rt='\u2557',\n    lb='\u255a', rb='\u255d',\n    headers='\u2550', sides='\u2551'\n)\nprint(Panel('My text', border_style=borders))\n</code></pre> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 My text                              \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre> <p>Here <code>lt</code>, <code>rt</code> are the top left and right corners,  <code>lb</code>, <code>rb</code> are the bottom corners.  <code>headers</code> are the symbols for the \"caps\" at the top and bottom,  and <code>siders</code> are the side symbols.</p> <p>The <code>siders</code> deserve special attention. If you specify it as an empty string,  or in case of using not <code>BorderStyle</code> but a <code>str</code>, specify five characters instead of six,  the text inside Panel will not wrap, it will stretch to the full width of the terminal.</p> <pre><code>from outlify.panel import Panel\n\nlong_text = (\n        \"In a world where CLI tools are often boring and unstructured, \"\n        \"Outlify brings beauty and structure to your terminal output. \"\n        \"It allows developers to create elegant panels with customizable \"\n        \"borders, titles, subtitles, and aligned content \u2014 all directly \"\n        \"in the terminal.\\n\\n\"\n        \"Outlify is lightweight and dependency-free \u2014 it uses only Python\u2019s \"\n        \"standard libraries, so you can easily integrate it into any \"\n        \"project without worrying about bloat or compatibility issues.\\n\\n\"\n        \"Whether you're building debugging tools, reporting pipelines, or \"\n        \"just want to print data in a cleaner way, \"\n        \"Outlify helps you do it with style.\"\n    )\nprint(Panel(long_text, border_style='\u2554\u2557\u255a\u255d\u2550'))\n</code></pre> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n In a world where CLI tools are often boring and unstructured, Outlify brings beauty and structure to your terminal output. It allows developers to create elegant panels with customizable borders, titles, subtitles, and aligned content \u2014 all directly in the terminal.\n\n Outlify is lightweight and dependency-free \u2014 it uses only Python\u2019s standard libraries, so you can easily integrate it into any project without worrying about bloat or compatibility issues.\n\n Whether you're building debugging tools, reporting pipelines, or just want to print data in a cleaner way, Outlify helps you do it with style.\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre>"}]}